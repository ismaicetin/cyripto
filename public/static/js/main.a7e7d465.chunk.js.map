{"version":3,"sources":["logo.svg","DenemeChart.js","App.js","reportWebVitals.js","index.js"],"names":["Bar","data","categories","name","getdate","backgroundColor","value","date","Date","getMonth","slice","getDate","getFullYear","getHours","getMinutes","getSeconds","useEffect","Highcharts","chart","type","height","width","title","text","xAxis","labels","formatter","this","yAxis","max","min","plotLines","color","dashStyle","label","align","style","fontStyle","x","zIndex","plotOptions","spline","marker","enable","tooltip","y","series","id","App","sw","wsUrl","location","origin","replace","wsdataTemp","useState","setdata","runSocket","_","console","log","WebSocket","onopen","onmessage","msg","msgdata","JSON","parse","tempdata","onerror","e","error","close","onclose","warn","setTimeout","className","src","logo","alt","Object","keys","map","item","paddingBottom","DenemeChart","length","category","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7e7d465.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// import React, { useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n\n// export default function DenemeChart({ data = [], debug = false }) {\n// \tconst inputEl = useRef();\n\n// \tlet chart;\n\n// \tuseEffect(() => {\n// \t\tchart = Highcharts.chart(inputEl.current, {\n// \t\t\ttitle: {\n// \t\t\t\ttext: \"Solar Employment Growth by Sector, 2010-2016\",\n// \t\t\t},\n\n// \t\t\tsubtitle: {\n// \t\t\t\ttext: \"Source: thesolarfoundation.com\",\n// \t\t\t},\n\n// \t\t\tyAxis: {\n// \t\t\t\ttitle: {\n// \t\t\t\t\ttext: \"Number of Employees\",\n// \t\t\t\t},\n// \t\t\t},\n\n// \t\t\tlegend: {\n// \t\t\t\tlayout: \"vertical\",\n// \t\t\t\talign: \"right\",\n// \t\t\t\tverticalAlign: \"middle\",\n// \t\t\t},\n\n// \t\t\tplotOptions: {\n// \t\t\t\tseries: {\n// \t\t\t\t\tlabel: {\n// \t\t\t\t\t\tconnectorAllowed: false,\n// \t\t\t\t\t},\n// \t\t\t\t},\n// \t\t\t},\n\n// \t\t\tseries: [\n// \t\t\t\t{\n// \t\t\t\t\tname: \"Installation\",\n// \t\t\t\t\tdata: data,\n// \t\t\t\t},\n// \t\t\t],\n\n// \t\t\tresponsive: {\n// \t\t\t\trules: [\n// \t\t\t\t\t{\n// \t\t\t\t\t\tcondition: {\n// \t\t\t\t\t\t\tmaxWidth: 500,\n// \t\t\t\t\t\t},\n// \t\t\t\t\t\tchartOptions: {\n// \t\t\t\t\t\t\tlegend: {\n// \t\t\t\t\t\t\t\tlayout: \"horizontal\",\n// \t\t\t\t\t\t\t\talign: \"center\",\n// \t\t\t\t\t\t\t\tverticalAlign: \"bottom\",\n// \t\t\t\t\t\t\t},\n// \t\t\t\t\t\t},\n// \t\t\t\t\t},\n// \t\t\t\t],\n// \t\t\t},\n// \t\t});\n// \t\treturn () => {\n// \t\t\tchart.destroy();\n// \t\t};\n// \t}, [data]);\n\n// \t// useEffect(() => {\n// \t// \tchart?.destroy();\n// \t// \tchart = Highcharts.chart(inputEl.current, {\n// \t// \t\ttitle: {\n// \t// \t\t\ttext: \"Solar Employment Growth by Sector, 2010-2016\",\n// \t// \t\t},\n\n// \t// \t\tsubtitle: {\n// \t// \t\t\ttext: \"Source: thesolarfoundation.com\",\n// \t// \t\t},\n\n// \t// \t\tyAxis: {\n// \t// \t\t\ttitle: {\n// \t// \t\t\t\ttext: \"Number of Employees\",\n// \t// \t\t\t},\n// \t// \t\t},\n\n// \t// \t\tlegend: {\n// \t// \t\t\tlayout: \"vertical\",\n// \t// \t\t\talign: \"right\",\n// \t// \t\t\tverticalAlign: \"middle\",\n// \t// \t\t},\n\n// \t// \t\tplotOptions: {\n// \t// \t\t\tseries: {\n// \t// \t\t\t\tlabel: {\n// \t// \t\t\t\t\tconnectorAllowed: false,\n// \t// \t\t\t\t},\n// \t// \t\t\t},\n// \t// \t\t},\n\n// \t// \t\tseries: [\n// \t// \t\t\t{\n// \t// \t\t\t\tname: \"Installation\",\n// \t// \t\t\t\tdata: data,\n// \t// \t\t\t},\n// \t// \t\t],\n\n// \t// \t\tresponsive: {\n// \t// \t\t\trules: [\n// \t// \t\t\t\t{\n// \t// \t\t\t\t\tcondition: {\n// \t// \t\t\t\t\t\tmaxWidth: 500,\n// \t// \t\t\t\t\t},\n// \t// \t\t\t\t\tchartOptions: {\n// \t// \t\t\t\t\t\tlegend: {\n// \t// \t\t\t\t\t\t\tlayout: \"horizontal\",\n// \t// \t\t\t\t\t\t\talign: \"center\",\n// \t// \t\t\t\t\t\t\tverticalAlign: \"bottom\",\n// \t// \t\t\t\t\t\t},\n// \t// \t\t\t\t\t},\n// \t// \t\t\t\t},\n// \t// \t\t\t],\n// \t// \t\t},\n// \t// \t});\n// \t// \tconsole.log(chart);\n// \t// }, [data]);\n// \treturn (\n// \t\t<div>\n// \t\t\t{debug && <div>{JSON.stringify(data[0])}</div>}\n// \t\t\t<div id=\"container\" ref={inputEl}></div>\n// \t\t</div>\n// \t);\n// }\nimport React, { useEffect } from \"react\";\nimport Highcharts from \"highcharts\";\n\nconst Bar = ({ data, categories, name, backgroundColor }) => {\n\tconst getdate = (value) => {\n\t\tlet date = new Date(value);\n\n\t\tvar dateStr =\n\t\t\t(\"00\" + (date.getMonth() + 1)).slice(-2) +\n\t\t\t\"/\" +\n\t\t\t(\"00\" + date.getDate()).slice(-2) +\n\t\t\t\"/\" +\n\t\t\tdate.getFullYear() +\n\t\t\t\" \" +\n\t\t\t(\"00\" + date.getHours()).slice(-2) +\n\t\t\t\":\" +\n\t\t\t(\"00\" + date.getMinutes()).slice(-2) +\n\t\t\t\":\" +\n\t\t\t(\"00\" + date.getSeconds()).slice(-2);\n\t\treturn dateStr;\n\t};\n\n\tuseEffect(() => {\n\t\t// Highcharts.chart(\"container\", {\n\t\t// \tchart: {\n\t\t// \t\ttype: \"line\",\n\t\t// \t\tbackgroundColor,\n\t\t// \t},\n\t\t// \tcolors: [\"#FBD94F\", \"#0170F3\"],\n\t\t// \ttitle: {\n\t\t// \t\ttext: \"Yearly Breakup\",\n\t\t// \t\t// style: { color: \"#0170F3\", fontWeight: 900, fontSize: \"20px\" },\n\t\t// \t},\n\t\t// \t// xAxis: {\n\t\t// \t// \tcategories,\n\t\t// \t// },\n\t\t// \tyAxis: {\n\t\t// \t\tmin: 0,\n\t\t// \t\ttitle: {\n\t\t// \t\t\ttext: \"Amount\",\n\t\t// \t\t},\n\t\t// \t},\n\t\t// \ttooltip: {\n\t\t// \t\tpointFormat:\n\t\t// \t\t\t'<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',\n\t\t// \t\tshared: true,\n\t\t// \t},\n\t\t// \tplotOptions: {\n\t\t// \t\tcolumn: {\n\t\t// \t\t\tstacking: \"percent\",\n\t\t// \t\t},\n\t\t// \t},\n\t\t// \tseries: data,\n\t\t// });\n\n\t\tHighcharts.chart(`container${name}`, {\n\t\t\tchart: {\n\t\t\t\ttype: \"line\",\n\t\t\t\theight: 768,\n\t\t\t\twidth: 1080,\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: name,\n\t\t\t},\n\n\t\t\txAxis: {\n\t\t\t\tcategories: categories,\n\t\t\t\tlabels: {\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\treturn getdate(this.value);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: \"Number of Employees\",\n\t\t\t\t},\n\t\t\t\tmax: 100,\n\t\t\t\tmin: 0,\n\t\t\t\tplotLines: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor: \"black\",\n\t\t\t\t\t\tdashStyle: \"dot\",\n\t\t\t\t\t\twidth: 3,\n\t\t\t\t\t\tvalue: 70,\n\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\talign: \"right\",\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tfontStyle: \"italic\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttext: \"Satım Yap\",\n\t\t\t\t\t\t\tx: -10,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzIndex: 3,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor: \"red\",\n\t\t\t\t\t\tdashStyle: \"dot\",\n\t\t\t\t\t\twidth: 3,\n\t\t\t\t\t\tvalue: 30,\n\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\talign: \"right\",\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tfontStyle: \"italic\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttext: \"Alım Yap\",\n\t\t\t\t\t\t\tx: -10,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzIndex: 3,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tspline: {\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tenable: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tformatter: function () {\n\t\t\t\t\treturn `${getdate(this.x)} : <strong style=\" color: red; \">${this.y}</strong>`;\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Installation\",\n\t\t\t\t\tdata: data,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [name]);\n\n\treturn <div id={`container${name}`}></div>;\n};\n\nexport default Bar;\n","import { useEffect, useState } from \"react\";\n\n// import CoinGecko from \"coingecko-api\"; // https://github.com/miscavage/CoinGecko-API\n// import { rsi } from \"./trading-indicator/index\"; //https://github.com/thanhnguyennguyen/trading-indicator\n// const rsi = require(\"trading-indicator\").rsi;\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport DenemeChart from \"./DenemeChart\";\n// const ccxt = require(\"ccxt\");\nfunction App() {\n\tvar wsUrl = location.origin.replace(/^http/, \"ws\");\n\t// let wsUrl = `ws://localhost:5000/?token=ismailcetin`;\n\t// let wsUrl = `ws://cyripto.herokuapp.com:8080/?token=ismailcetin`;\n\tlet wsdataTemp = [];\n\tconst [data, setdata] = useState([]);\n\t// const CoinGeckoClient = new CoinGecko();\n\t// const [rsiData, setrsiData] = useState([]);\n\t// const [category, setcategory] = useState([]);\n\t// const binance = new ccxt.binance();\n\n\tlet sw;\n\tconst runSocket = (_) => {\n\t\tconsole.log(\"runSocket\");\n\t\tsw = new WebSocket(wsUrl);\n\n\t\tsw.onopen = function () {\n\t\t\tconsole.log(\"ws connected\");\n\t\t};\n\n\t\tsw.onmessage = (msg) => {\n\t\t\tlet msgdata = JSON.parse(msg.data);\n\t\t\tconsole.log(msgdata);\n\t\t\tlet tempdata = { ...wsdataTemp, ...msgdata };\n\t\t\twsdataTemp = tempdata;\n\t\t\tsetdata(tempdata);\n\t\t};\n\t\tsw.onerror = (e) => {\n\t\t\tconsole.error(\"ws onerror\");\n\t\t\tconsole.error(e);\n\t\t\tsw.close();\n\t\t};\n\n\t\tsw.onclose = (e) => {\n\t\t\tconsole.warn(\"ws onclose\");\n\t\t\tconsole.warn(e);\n\t\t\tsetTimeout(runSocket, 5000);\n\t\t};\n\t};\n\n\tconst disableSocket = (_) => {\n\t\tsw.close();\n\t\tconsole.log(\"ws disableSocket\");\n\t};\n\n\tuseEffect(() => {\n\t\t// run();\n\t\trunSocket();\n\t\treturn () => {\n\t\t\tdisableSocket();\n\t\t};\n\t}, []);\n\n\t// const run = async () => {\n\t// \t// let a = await binance.fetchOHLCV(\"BTC/USDT\", \"4h\", undefined, 10);\n\t// \t// console.log(a);\n\t// \t// debugger;\n\n\t// \tconsole.clear();\n\t// \tlet data, category;\n\t// \t[data, category] = await rsi(14, \"close\", \"binance\", \"CHZ/USDT\", \"4h\", true);\n\t// \tconsole.log(\"rsi\", data, category);\n\t// \tsetrsiData(data);\n\t// \tsetcategory(category);\n\t// \t//3. Make calls\n\t// \t// data = await CoinGeckoClient.ping(); ////API sunucu durumunu kontrol edin.\n\t// \t// console.log(\"ping\", data);\n\t// \t// data = await CoinGeckoClient.global(); //Küresel kripto para birimi verilerini alın.\n\t// \t// console.log(\"global\", data);\n\t// \t// data = await CoinGeckoClient.coins.all(); //Tüm kripto paraları verilerle (isim, fiyat, pazar, geliştirici, topluluk, vb.) Listeleyin - 50 ile sayfalandırılmış.\n\t// \t// console.log(\"coins.all\", data);\n\t// \t// data = await CoinGeckoClient.coins.list(); //API çağrıları yapmak için tüm paraların kimliğini almak için bunu kullanın\n\t// \t// console.log(\"coins.list\", data);\n\t// \t// data = await CoinGeckoClient.coins.markets(); //Tüm madeni para piyasa verilerini (fiyat, piyasa değeri, hacim) elde etmek için bunu kullanın.\n\t// \t// console.log(\"coins.markets\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetch(\"bitcoin\", {}); //Bir jeton için güncel verileri (isim, fiyat, pazar,… takas fişleri dahil) alın.\n\t// \t// console.log(\"coins.fetch\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchTickers(\"bitcoin\"); //Madeni para şeritleri alın (100 maddeye bölünmüş olarak).\n\t// \t// console.log(\"coins.fetchTickers\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchHistory(\"bitcoin\", { date: \"30-12-2017\" }); //Bir madeni para için belirli bir tarihte geçmiş verileri (isim, fiyat, piyasa, istatistikler) alın.\n\t// \t// console.log(\"coins.fetchHistory\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchMarketChart(\"bitcoin\"); //Fiyat, piyasa değeri ve 24 saatlik hacmi (ayrıntı düzeyi otomatik) içeren geçmiş piyasa verilerini alın.\n\t// \t// console.log(\"coins.fetchMarketChart\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchMarketChartRange(\"bitcoin\", {\n\t// \t// \tfrom: 13925,\n\t// \t// \tto: 1422577232,\n\t// \t// }); //Tarihsel piyasa verilerini alın, fiyat, piyasa değeri ve bir zaman damgası aralığında (ayrıntı düzeyi otomatik) 24 saatlik hacmi içerir. Dakikalık veriler 1 gün içinde kullanılacaktır. Saatlik veriler 1 gün ile 90 gün arasındaki süre için kullanılacaktır. Günlük veriler, 90 günün üzerindeki süre boyunca kullanılacaktır.\n\t// \t// console.log(\"coins.fetchMarketChartRange\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchStatusUpdates(\"bitcoin\"); //Belirli bir jeton için durum güncellemelerini alın.\n\t// \t// console.log(\"coins.fetchStatusUpdates\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.all(); //Borsalarla ilgili aramalar.\n\t// \t// console.log(\"exchanges.all\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.list(); //Desteklenen tüm pazarların kimliğini ve adını listeleyin (sayfalandırma gerekmez).\n\t// \t// console.log(\"exchanges.list\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetch(\"binance\"); //Yalnızca belirli bir borsa için BTC cinsinden döviz hacmini ve en iyi 100 kuponu alın.\n\t// \t// console.log(\"exchanges.fetch\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetchTickers(\"binance\"); //Belirli bir değişim için bilet  alın.\n\t// \t// console.log(\"exchanges.fetchTickers\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetchStatusUpdates(\"binance\"); //Belirli bir değişim için durum güncellemelerini alın.\n\t// \t// console.log(\"exchanges.fetchStatusUpdates\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetchVolumeChart(\"binance\", {\n\t// \t// \tdays: 1,\n\t// \t// }); //BTC olarak döndürülen belirli bir borsa için hacim grafiği verilerini alın\n\t// \t// console.log(\"exchanges.fetchVolumeChart\", data);\n\t// \t// data = await CoinGeckoClient.statusUpdates.all(); //\n\t// \t// console.log(\"statusUpdates.all\", data);\n\t// \t// data = await CoinGeckoClient.events.all(); //\n\t// \t// console.log(\"events.all\", data);\n\t// \t// data = await CoinGeckoClient.events.fetchCountries(); //\n\t// \t// console.log(\"events.fetchCountries\", data);\n\t// \t// data = await CoinGeckoClient.events.fetchTypes(); //\n\t// \t// console.log(\"events.fetchTypes\", data);\n\t// };\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n\t\t\t\t{Object.keys(data).map((item) => (\n\t\t\t\t\t<div style={{ paddingBottom: 15 }}>\n\t\t\t\t\t\t<DenemeChart\n\t\t\t\t\t\t\tname={item}\n\t\t\t\t\t\t\tdata={data[item].data.slice(data[item].data.length - 15)}\n\t\t\t\t\t\t\tcategories={data[item].category.slice(data[item].category.length - 15)}\n\t\t\t\t\t\t\tdebug\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["trading-indicator/indicators/ohlcv.js","trading-indicator/indicators/source.js","trading-indicator/indicators/rsi.js","DenemeChart.js","App.js","reportWebVitals.js","index.js"],"names":["getOHLCV","ex","ticker","interval","a","isFuture","ccxt","exchanges","includes","exchangeId","exchangeClass","exchange","options","defaultMarket","fetchOHLCV","console","log","detachSource","ohlcv","source","length","forEach","data","push","indicators","require","rsi","rsiLength","sourceType","rsiInput","values","period","RSI","calculate","result","date","slice","Bar","chartData","sliceCount","name","subtitle","getdate","backgroundColor","value","Date","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","useEffect","Highcharts","chart","type","title","text","xAxis","categories","category","labels","formatter","this","yAxis","max","min","plotLines","color","dashStyle","width","label","align","style","fontStyle","x","zIndex","plotOptions","spline","marker","enable","tooltip","y","series","id","App","useState","charData","setcharData","binance","wsRun","ws","filteredSymbols","axios","get","then","response","cryptoCurrencyList","map","item","symbol","catch","error","Tempdata","index","coinSymbol","tahminPiyasa","curretCoinPrice","tahminiFiyat","yuzdeKazanc","coin","fetchOrderBook","fetchOrderBooks","SatisEmir","asks","reduce","currentValue","currentIndex","arr","total","adet","alisEmri","bids","SatisEmirR","alisEmirR","toFixed","className","Container","Row","Object","keys","Col","xs","md","paddingBottom","DenemeChart","debug","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b16dc5e.chunk.js","sourcesContent":["import ccxt from \"ccxt\";\n\nconst getOHLCV = async (ex, ticker, interval, isFuture = false) => {\n\tif (!ccxt.exchanges.includes(ex)) {\n\t\tthrow \"Exchange is not supported\";\n\t}\n\ttry {\n\t\tlet exchangeId = ex,\n\t\t\texchangeClass = ccxt[exchangeId];\n\n\t\tlet exchange;\n\t\tif (isFuture) {\n\t\t\texchange = new exchangeClass({\n\t\t\t\toptions: {\n\t\t\t\t\tdefaultMarket: \"future\",\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\texchange = new exchangeClass({});\n\t\t}\n\t\treturn await exchange.fetchOHLCV(ticker, interval);\n\t} catch (err) {\n\t\t// throw \"Ticker is not supported\";\n\t\tconsole.log(`${ex} =>${ticker} Ticker is not supported`);\n\t\treturn null;\n\t}\n};\n// console.log(getOHLCV(\"binance\", \"BTC/USDT\", \"15m\", true))\nexport default getOHLCV;\n","const timeIndex = 0,\n\tdIndex = 0,\n\toIndex = 1,\n\thIndex = 2,\n\tlIndex = 3,\n\tcIndex = 4,\n\tvIndex = 5;\nconst detachSource = (ohlcv) => {\n\tlet source = [];\n\tsource[\"date\"] = [];\n\tsource[\"open\"] = [];\n\tsource[\"high\"] = [];\n\tsource[\"low\"] = [];\n\tsource[\"close\"] = [];\n\tsource[\"volume\"] = [];\n\tif (ohlcv.length == 0) {\n\t\treturn source;\n\t}\n\tohlcv.forEach((data) => {\n\t\tsource[\"date\"].push(data[dIndex]);\n\t\tsource[\"open\"].push(data[oIndex]);\n\t\tsource[\"high\"].push(data[hIndex]);\n\t\tsource[\"low\"].push(data[lIndex]);\n\t\tsource[\"close\"].push(data[cIndex]);\n\t\tsource[\"volume\"].push(data[vIndex]);\n\t});\n\treturn source;\n};\nexport default detachSource;\n","// const getOHLCV = require(\"./ohlcv.js\");\n// const detachSource = require(\"./source.js\");\nimport getOHLCV from \"./ohlcv.js\";\nimport detachSource from \"./source.js\";\nconst indicators = require(\"technicalindicators\");\nconst rsi = async (rsiLength, sourceType, ex, ticker, interval, isFuture = false) => {\n\ttry {\n\t\tlet ohlcv = await getOHLCV(ex, ticker, interval, isFuture);\n\t\tif (!ohlcv) return [[], []];\n\n\t\tlet source = detachSource(ohlcv);\n\t\tlet rsiInput = {\n\t\t\tvalues: source[sourceType],\n\t\t\tperiod: rsiLength,\n\t\t\t// reversedInput: true,\n\t\t};\n\t\tlet result = await indicators.RSI.calculate(rsiInput);\n\t\treturn [result, source.date.slice(rsiLength)];\n\t} catch (err) {\n\t\tthrow err;\n\t}\n};\nexport default rsi;\n","import React, { useEffect } from \"react\";\nimport Highcharts from \"highcharts\";\n\nconst Bar = ({ chartData, sliceCount = 30, name, subtitle, backgroundColor }) => {\n\tconst getdate = (value) => {\n\t\tlet date = new Date(value);\n\t\tvar dateStr =\n\t\t\t(\"00\" + (date.getMonth() + 1)).slice(-2) +\n\t\t\t\"/\" +\n\t\t\t(\"00\" + date.getDate()).slice(-2) +\n\t\t\t\"/\" +\n\t\t\tdate.getFullYear() +\n\t\t\t\" \" +\n\t\t\t(\"00\" + date.getHours()).slice(-2) +\n\t\t\t\":\" +\n\t\t\t(\"00\" + date.getMinutes()).slice(-2) +\n\t\t\t\":\" +\n\t\t\t(\"00\" + date.getSeconds()).slice(-2);\n\t\treturn dateStr;\n\t};\n\n\tuseEffect(() => {\n\t\tHighcharts.chart(`container${name}`, {\n\t\t\tchart: {\n\t\t\t\ttype: \"line\",\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: name,\n\t\t\t},\n\t\t\tsubtitle: {\n\t\t\t\ttext: subtitle,\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tcategories: chartData.category.slice(chartData.category.length - sliceCount, chartData.category.length),\n\t\t\t\tlabels: {\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\treturn getdate(this.value);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: \"Number of Employees\",\n\t\t\t\t},\n\t\t\t\tmax: 100,\n\t\t\t\tmin: 0,\n\t\t\t\tplotLines: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor: \"black\",\n\t\t\t\t\t\tdashStyle: \"dot\",\n\t\t\t\t\t\twidth: 3,\n\t\t\t\t\t\tvalue: 70,\n\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\talign: \"right\",\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tfontStyle: \"italic\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttext: \"Satım Yap\",\n\t\t\t\t\t\t\tx: -10,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzIndex: 3,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor: \"red\",\n\t\t\t\t\t\tdashStyle: \"dot\",\n\t\t\t\t\t\twidth: 3,\n\t\t\t\t\t\tvalue: 30,\n\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\talign: \"right\",\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tfontStyle: \"italic\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttext: \"Alım Yap\",\n\t\t\t\t\t\t\tx: -10,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzIndex: 3,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tspline: {\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tenable: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tformatter: function () {\n\t\t\t\t\treturn `${getdate(this.x)} : <strong style=\" color: red; \">${this.y}</strong>`;\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Installation\",\n\t\t\t\t\tdata: chartData.data.slice(chartData.category.length - sliceCount, chartData.category.length),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [name]);\n\n\treturn <div id={`container${name}`}></div>;\n};\n\nexport default Bar;\n","import { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport ccxt from \"ccxt\";\nimport { rsi } from \"./trading-indicator\";\nimport \"./App.css\";\nimport DenemeChart from \"./DenemeChart\";\nconst indicators = require(\"technicalindicators\");\n\nfunction App() {\n\tconst [charData, setcharData] = useState([]);\n\tlet binance = new ccxt.binance();\n\n\tuseEffect(() => {\n\t\t// tahminPiyasa();\n\t\twsRun();\n\t}, []);\n\n\tconst wsRun = async (ws) => {\n\t\t// while (true) {\n\t\t// let a = await binance.loadMarkets();\n\n\t\t// console.log(\"binance\", binance.symbols);\n\t\t// let filteredSymbols = binance.symbols.filter((symbol) => /[a-zA-Z]\\/USDT/gi.test(symbol));\n\n\t\tlet filteredSymbols = [];\n\t\tawait axios\n\t\t\t.get(\n\t\t\t\t\"https://api.coinmarketcap.com/data-api/v3/cryptocurrency/listing?start=1&limit=300&sortBy=market_cap&sortType=desc&convert=USD,btc,eth&cryptoType=all&tagType=all&aux=ath,atl,high24h,low24h,num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,volume_7d,volume_30d\"\n\t\t\t)\n\t\t\t.then(function (response) {\n\t\t\t\tfilteredSymbols = response.data.data.cryptoCurrencyList;\n\t\t\t\tfilteredSymbols = filteredSymbols.map((item) => `${item.symbol}/USDT`);\n\n\t\t\t\tconsole.log({ filteredSymbols });\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t\t// handle error\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\t// always executed\n\t\t\t});\n\n\t\t// await axios.get(\"https://api.binance.com/api/v1/exchangeInfo\").then(function (response) {\n\t\t// \tfilteredSymbols = response.data.data.symbols;\n\n\t\t// \tquoteAsset\n\n\t\t// \tfilteredSymbols = filteredSymbols.map((item) => `${item.baseAsset}/USDT`);\n\n\t\t// \tconsole.log({ filteredSymbols });\n\t\t// });\n\n\t\tfilteredSymbols = [\n\t\t\t\"USDT/TRY\",\n\t\t\t\"BUSD/TRY\",\n\t\t\t\"HOT/TRY\",\n\t\t\t\"CHZ/TRY\",\n\t\t\t\"BTT/TRY\",\n\t\t\t\"WAVES/USDT\",\n\t\t\t\"ADA/TRY\",\n\t\t\t\"TRX/TRY\",\n\t\t\t\"RVN/USDT\",\n\t\t\t\"XRP/TRY\",\n\t\t\t\"AVAX/TRY\",\n\t\t\t\"ONT/USDT\",\n\t\t\t\"BAT/USDT\",\n\t\t\t\"ETH/TRY\",\n\t\t\t\"DOGE/TRY\",\n\t\t\t\"XLM/TRY\",\n\t\t\t\"EOS/USDT\",\n\t\t\t\"DOT/TRY\",\n\t\t\t\"UNI/USDT\",\n\t\t\t\"LINK/TRY\",\n\t\t\t\"BAL/USDT\",\n\t\t\t\"NEO/TRY\",\n\t\t\t\"XTZ/USDT\",\n\t\t\t\"ATOM/USDT\",\n\t\t\t\"LTC/USDT\",\n\t\t\t\"AAVE/USDT\",\n\t\t\t\"BCH/USDT\",\n\t\t\t\"MKR/USDT\",\n\n\t\t\t\"BTC/TRY\",\n\t\t\t\"BNB/TRY\",\n\t\t\t\"SXP/TRY\",\n\t\t\t\"OMG/USDT\",\n\t\t\t\"DOCOS/USDT\",\n\t\t\t\"WAN/USDT\",\n\t\t\t\"HBAR/USDT\",\n\t\t\t\"IOTA/USDT\",\n\t\t\t\"XEM/USDT\",\n\t\t\t\"LINKDOWN/USDT\",\n\t\t\t\"DGB/USDT\",\n\t\t\t\"BNB/USDT\",\n\t\t\t\"QTUM/USDT\",\n\t\t\t\"NPXS/USDT\",\n\t\t\t\"ANKR/USDT\",\n\t\t\t\"RVN/USDT\",\n\t\t\t\"TROY/USDT\",\n\t\t\t\"ENJ/BNB\",\n\t\t\t\"WIN/BNB\",\n\t\t\t\"ONE/BNB\",\n\t\t];\n\n\t\tlet Tempdata = {};\n\t\tfor (let index = 0; index < filteredSymbols.length; index++) {\n\t\t\tconst coinSymbol = filteredSymbols[index];\n\n\t\t\tlet [data, category] = await rsi(14, \"close\", \"binance\", coinSymbol, \"4h\", true);\n\n\t\t\tif (data.length > 0) {\n\t\t\t\tlet [coin, curretCoinPrice, tahminiFiyat, yuzdeKazanc] = await tahminPiyasa(coinSymbol);\n\t\t\t\t// console.log(`${coinSymbol} Rsi`, data, category);\n\t\t\t\tTempdata = { ...Tempdata, [coinSymbol]: { data, category, curretCoinPrice, tahminiFiyat, yuzdeKazanc } };\n\t\t\t\t// setcharData([...data, { [coinSymbol]: { data, category } }]);\n\t\t\t\tsetcharData(Tempdata);\n\t\t\t\tconsole.log(Tempdata);\n\t\t\t}\n\t\t}\n\t\t// }\n\t};\n\n\tconst tahminPiyasa = async (coin) => {\n\t\t// SelectCoin = [\"ATOM/USDT\"];\n\n\t\t// for (let index = 0; index < SelectCoin.length; index++) {\n\t\t// const coin = SelectCoin[index];\n\t\tlet symbol = await binance.fetchOHLCV(coin, \"1m\");\n\t\tlet fetchOrderBooks = await binance.fetchOrderBook(coin, 5000);\n\t\tlet SatisEmir = fetchOrderBooks.asks.reduce(\n\t\t\t(result, currentValue, currentIndex, arr) => {\n\t\t\t\tresult.total = result.total + currentValue[0] * currentValue[1];\n\t\t\t\tresult.adet = result.adet + currentValue[1];\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t{ total: 0, adet: 0 }\n\t\t);\n\n\t\tlet alisEmri = fetchOrderBooks.bids.reduce(\n\t\t\t(result, currentValue, currentIndex, arr) => {\n\t\t\t\tresult.total = result.total + currentValue[0] * currentValue[1];\n\t\t\t\tresult.adet = result.adet + currentValue[1];\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t{ total: 0, adet: 0 }\n\t\t);\n\n\t\tlet SatisEmirR = SatisEmir.total / SatisEmir.adet;\n\t\tlet alisEmirR = alisEmri.total / alisEmri.adet;\n\t\tlet curretCoinPrice = symbol[symbol.length - 1][1];\n\t\tlet tahminiFiyat = (SatisEmirR + alisEmirR) / 2;\n\t\tlet yuzdeKazanc = (100 * (tahminiFiyat - curretCoinPrice)) / curretCoinPrice;\n\t\tconsole.log(coin, { curretCoinPrice }, tahminiFiyat, { yuzdeKazanc: yuzdeKazanc.toFixed(2) });\n\t\treturn [coin, curretCoinPrice, tahminiFiyat, yuzdeKazanc];\n\t\t// }\n\t};\n\n\t// const run = async () => {\n\t// \t// let a = await binance.fetchOHLCV(\"BTC/USDT\", \"4h\", undefined, 10);\n\t// \t// console.log(a);\n\t// \t// debugger;\n\n\t// \tconsole.clear();\n\t// \tlet data, category;\n\t// \t[data, category] = await rsi(14, \"close\", \"binance\", \"CHZ/USDT\", \"4h\", true);\n\t// \tconsole.log(\"rsi\", data, category);\n\t// \tsetrsiData(data);\n\t// \tsetcategory(category);\n\t// \t//3. Make calls\n\t// \t// data = await CoinGeckoClient.ping(); ////API sunucu durumunu kontrol edin.\n\t// \t// console.log(\"ping\", data);\n\t// \t// data = await CoinGeckoClient.global(); //Küresel kripto para birimi verilerini alın.\n\t// \t// console.log(\"global\", data);\n\t// \t// data = await CoinGeckoClient.coins.all(); //Tüm kripto paraları verilerle (isim, fiyat, pazar, geliştirici, topluluk, vb.) Listeleyin - 50 ile sayfalandırılmış.\n\t// \t// console.log(\"coins.all\", data);\n\t// \t// data = await CoinGeckoClient.coins.list(); //API çağrıları yapmak için tüm paraların kimliğini almak için bunu kullanın\n\t// \t// console.log(\"coins.list\", data);\n\t// \t// data = await CoinGeckoClient.coins.markets(); //Tüm madeni para piyasa verilerini (fiyat, piyasa değeri, hacim) elde etmek için bunu kullanın.\n\t// \t// console.log(\"coins.markets\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetch(\"bitcoin\", {}); //Bir jeton için güncel verileri (isim, fiyat, pazar,… takas fişleri dahil) alın.\n\t// \t// console.log(\"coins.fetch\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchTickers(\"bitcoin\"); //Madeni para şeritleri alın (100 maddeye bölünmüş olarak).\n\t// \t// console.log(\"coins.fetchTickers\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchHistory(\"bitcoin\", { date: \"30-12-2017\" }); //Bir madeni para için belirli bir tarihte geçmiş verileri (isim, fiyat, piyasa, istatistikler) alın.\n\t// \t// console.log(\"coins.fetchHistory\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchMarketChart(\"bitcoin\"); //Fiyat, piyasa değeri ve 24 saatlik hacmi (ayrıntı düzeyi otomatik) içeren geçmiş piyasa verilerini alın.\n\t// \t// console.log(\"coins.fetchMarketChart\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchMarketChartRange(\"bitcoin\", {\n\t// \t// \tfrom: 13925,\n\t// \t// \tto: 1422577232,\n\t// \t// }); //Tarihsel piyasa verilerini alın, fiyat, piyasa değeri ve bir zaman damgası aralığında (ayrıntı düzeyi otomatik) 24 saatlik hacmi içerir. Dakikalık veriler 1 gün içinde kullanılacaktır. Saatlik veriler 1 gün ile 90 gün arasındaki süre için kullanılacaktır. Günlük veriler, 90 günün üzerindeki süre boyunca kullanılacaktır.\n\t// \t// console.log(\"coins.fetchMarketChartRange\", data);\n\t// \t// data = await CoinGeckoClient.coins.fetchStatusUpdates(\"bitcoin\"); //Belirli bir jeton için durum güncellemelerini alın.\n\t// \t// console.log(\"coins.fetchStatusUpdates\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.all(); //Borsalarla ilgili aramalar.\n\t// \t// console.log(\"exchanges.all\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.list(); //Desteklenen tüm pazarların kimliğini ve adını listeleyin (sayfalandırma gerekmez).\n\t// \t// console.log(\"exchanges.list\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetch(\"binance\"); //Yalnızca belirli bir borsa için BTC cinsinden döviz hacmini ve en iyi 100 kuponu alın.\n\t// \t// console.log(\"exchanges.fetch\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetchTickers(\"binance\"); //Belirli bir değişim için bilet  alın.\n\t// \t// console.log(\"exchanges.fetchTickers\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetchStatusUpdates(\"binance\"); //Belirli bir değişim için durum güncellemelerini alın.\n\t// \t// console.log(\"exchanges.fetchStatusUpdates\", data);\n\t// \t// data = await CoinGeckoClient.exchanges.fetchVolumeChart(\"binance\", {\n\t// \t// \tdays: 1,\n\t// \t// }); //BTC olarak döndürülen belirli bir borsa için hacim grafiği verilerini alın\n\t// \t// console.log(\"exchanges.fetchVolumeChart\", data);\n\t// \t// data = await CoinGeckoClient.statusUpdates.all(); //\n\t// \t// console.log(\"statusUpdates.all\", data);\n\t// \t// data = await CoinGeckoClient.events.all(); //\n\t// \t// console.log(\"events.all\", data);\n\t// \t// data = await CoinGeckoClient.events.fetchCountries(); //\n\t// \t// console.log(\"events.fetchCountries\", data);\n\t// \t// data = await CoinGeckoClient.events.fetchTypes(); //\n\t// \t// console.log(\"events.fetchTypes\", data);\n\t// };\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"App-header\">\n\t\t\t\t<h2>ismail Çetin CYRIPTO</h2>\n\n\t\t\t\t<Container>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t{Object.keys(charData).map((item) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Col key={item} xs={12} md={4}>\n\t\t\t\t\t\t\t\t\t<div style={{ paddingBottom: 15 }}>\n\t\t\t\t\t\t\t\t\t\t<DenemeChart\n\t\t\t\t\t\t\t\t\t\t\tname={item}\n\t\t\t\t\t\t\t\t\t\t\tsubtitle={`<strong style=\"color:green\"> ${charData[item].curretCoinPrice.toFixed(\n\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t)}</strong>  =>  <strong style=\"color:black\">  ${charData[item].tahminiFiyat.toFixed(\n\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t)} </strong> <strong style=\"color:red\"> (${charData[item].yuzdeKazanc.toFixed(\n\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t)}) </strong> `}\n\t\t\t\t\t\t\t\t\t\t\tchartData={charData[item]}\n\t\t\t\t\t\t\t\t\t\t\tsliceCount={10}\n\t\t\t\t\t\t\t\t\t\t\tdebug\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}